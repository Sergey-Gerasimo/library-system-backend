@startuml CRUD_Architecture

skinparam class {
    BackgroundColor White
    ArrowColor #444444
    BorderColor #444444
}

skinparam note {
    BackgroundColor #F5F5F5
    BorderColor #DDDDDD
}

skinparam package {
    Style Rectangle
}

' Типы и интерфейсы
interface ICRUD<R, C, U, F> <<Protocol>> {
    + {abstract} create(create_data: C): R
    + {abstract} get_by_id(id: UUID): Optional[R]
    + {abstract} update(id: UUID, update_data: U): Optional[R]
    + {abstract} delete(id: UUID): bool
    + {abstract} exists(**kwargs): bool
    + {abstract} get_all(filter: Optional[F], limit: int, offset: int, order_by: Optional[str]): List[R]
}

abstract class AbstractCRUD<T, C, U, F, R> {
    - db: AsyncSession
    + {abstract} model(): type[T]
    + {abstract} response_schema(): type[R]
    + create(create_data: C): R
    + get_by_id(id: UUID): Optional[R]
    + update(id: UUID, update_data: U): Optional[R]
    + delete(id: UUID): bool
    + exists(**kwargs): bool
    + get_all(filter: Optional[F], limit: int, offset: int, order_by: Optional[str]): List[R]
    - _build_filter_conditions(filter: F): List[Any]
}

' Связи и наследование
AbstractCRUD .up.|> ICRUD : implements
AbstractCRUD ..|> ABC : extends

' Генераки
ICRUD -[hidden]right-> R
ICRUD -[hidden]right-> C
ICRUD -[hidden]right-> U
ICRUD -[hidden]right-> F



' Заметки
note top of ICRUD
  Базовый интерфейс для CRUD операций
  Использует дженерики:
  R - Response schema
  C - Create schema
  U - Update schema
  F - Filter schema
end note

note top of AbstractCRUD
  Абстрактная реализация ICRUD
  с автоматической обработкой ошибок
  и базовой реализацией методов:
  - Работа с SQLAlchemy
  - Валидация через Pydantic
  - Пагинация и фильтрация
end note

@enduml